<?xml version="1.0"?>
<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<project name="CTS 7 for use with a vendor's Java EE implementation" basedir="." default="usage">

    <!-- IMPORTS -->
    <import file="./ts.common.props.xml" optional="true"/>
    <import file="../../../../../../bin/xml/ts.common.props.xml" optional="true"/>

   <property name="enable.jms" value="true"/>
   <property name="create.jdbc.pools" value="true"/>


   <!-- The targets in this file are intended to be used by licensees for configuring their
        Java EE app servers for testing with CTS.
   -->

   <target name="usage">
        <echo message="The following ant targets are available to configure a Java EE server for CTS:"/>
        <echo message="ant -f javaee_vi.xml task"/>
        <echo message=""/>
        <echo message="The tasks are:"/>
        <echo message=""/>
        <echo message="clean.vi" />
        <echo message="config.vi" />
        <echo message="enable.jacc" />
        <echo message="disable.jacc" />
        <echo message="enable.wss.providers" />
        <echo message="disable.wss.providers" />
        <echo message="modify.jdbc.resources" />
        <echo message="add.interop.certs" />
   </target>

   <target name="build.porting.impl.jar">
    <tstamp/>
   </target>
   
   <target name="check.for.cts.internal.jar">
     <available file="${ts.home}/lib/cts-internal.jar" property="found.cts.internal.jar"/>
     <!--     <echo message="found.cts.internal.jar is ${found.cts.internal.jar}"/> -->
   </target>

   <target name="update.jar" if="found.cts.internal.jar">
     <!--     <echo message="update.jar running"/> -->
     <delete dir="${harness.temp.directory}/com" quiet="true" includeEmptyDirs="true"/>
     <unjar src="${ts.home}/lib/cts-internal.jar" dest="${harness.temp.directory}"/>
     <touch>
         <fileset dir="${ts.home}/tmp/com" includes="**"/>
     </touch>
     <jar destfile="${ts.home}/lib/cts.jar" basedir="${harness.temp.directory}"
          includes="com/**" update="true"/>
   </target>

   <target name="update.cts.jar" depends="check.for.cts.internal.jar, update.jar"/>

   <!--  Target to configure the Java EE app server under test -->
   <target name="config.vi" depends="checkCTSConfiguration, update.cts.jar, copy.db.jars, copy.cts.ext.jars">

       <ant antfile="s1as.xml" dir="." target="filter.password.file"/>
       
       <!--
         Now called from here instead of from s1as.xml's add.jdbc.resources
         target. Since the get command is broken (issue tracker bug id 7151)
         we need to use our regular expression hack to set the extension
         directories while the server is down. If we modify the domain.xml disk
         file while the server is up, the server process can overwrite our
         changes to the domain.xml file. See set.ext.dirs target in s1as.xml
         to see the hack. This code can be reverted once they fix bug ID 7151.
         We can go back to using the get command.
       -->
       <ant antfile="s1as.xml" dir="." target="reset.ext.dirs"/>
       <ant antfile="s1as.xml" dir="." target="add.ext.dirs"/>
       
       <antcall target="config.das"/>
       <antcall target="config.remoteInstance"/>

       <ant antfile="s1as.xml" dir="." target="restart.server"/>

       <!-- this is used to configure connector related targets on the app server -->
       <if>
         <isset property="skip.config.connector"/>
       <then>
         <echo>******** Skipping config.connector... *********</echo>
       </then>
       <else>
         <ant antfile="s1as.xml" dir="." target="config.connector"/>
       </else>
       </if>
       
       <ant antfile="s1as.xml" dir="." target="ping.jdbc.pool.check"/>
       <ant antfile="initdb.xml" dir="${bin.dir}/xml" target="init.derbyEmbedded"/>

   </target>



    <!-- Configure PE for the JASPIC(JSR-196) tests -->
    <target name="config.jaspic" if="testingAgainstDAS" depends="checkCTSConfiguration, update.jaspic.jar, copy.cts.ext.jars">
        <echo message="****Configuring for JASPIC (JSR-196) tests *****" />
        <ant antfile="s1as.xml" dir="." target="config.jaspic"/>
    </target>

    <!-- convenience method to support un-configuration of jaspic -->
    <target name="unconfig.jaspic">
        <ant antfile="s1as.xml" dir="." target="unconfig.jaspic"/>
    </target>

    <target name="update.jaspic.jar" depends="check.for.cts.internal.jar, update.jar"/>


   <!--
        Configure PE or the DAS(SE/EE) for CTS
   -->
   <target name="config.das" if="testingAgainstDAS" depends="use.jms,no.jms">
       <echo message="****Configuring the DAS/PE *****" />
       <ant antfile="s1as.xml" dir="." target="${configTarget}"/>
   </target>

   <!--
        Configure a remote instance(SE/EE) for CTS
   -->
   <target name="config.remoteInstance" if="testingAgainstRemoteInstance" depends="use.jms,no.jms">
       <echo message="****Configuring a remote instance (SE/EE) *****" />
       <ant antfile="sjsas_ee.xml" dir="${bin.dir}/xml" target="config.remoteInstance">
          <property name="configTarget" value="${configTarget}"/>
       </ant>
   </target>

   <!--  Target to remove the configuration for the Java EE app server under test -->

   <target name="clean.vi" depends="checkCTSConfiguration">
        <ant antfile="s1as.xml" dir="." target="filter.password.file"/>
        <!-- <antcall target="delete.cts.ext.jars"/> -->
        <antcall target="clean.das"/>
        <antcall target="clean.remoteInstance"/>
        <ant antfile="s1as.xml" dir="." target="restart.server"/>
   </target>
	
	
   <target name="restart.vi" depends="checkCTSConfiguration">
	     <ant antfile="s1as.xml" dir="." target="restart.server"/>
   </target>

   <!--
        Remove  PE or the DAS(SE/EE) configuration for CTS
   -->
   <target name="clean.das" if="testingAgainstDAS" depends="use.jms,no.jms">
       <echo message="****Removing CTS configuration for DAS/PE *****" />
       <ant antfile="s1as.xml" dir="." target="${cleanTarget}"/>
   </target>

   <!--
        Remove Configuration of a remote instance(SE/EE) for CTS
   -->
   <target name="clean.remoteInstance" if="testingAgainstRemoteInstance" depends="use.jms,no.jms">
       <echo message="****Removing CTS configuration for SE/EE *****" />
       <ant antfile="sjsas_ee.xml" dir="${bin.dir}/xml" target="clean.remoteInstance">
          <property name="cleanTarget" value="${cleanTarget}"/>
       </ant>
   </target>


   <!--  Target to shutdown the Java EE app server under test -->

   <target name="stop.vi" depends="checkCTSConfiguration">
       <antcall target="stop.remoteInstance"/>
       <echo message="****Stopping the domain under test *****" />
       <ant antfile="s1as.xml" dir="." target="stop-domain"/>
   </target>

   <!--
        Shutdown the remote instance(SE/EE) for CTS
   -->
   <target name="stop.remoteInstance" if="testingAgainstRemoteInstance" >
       <echo message="****Stopping the Remote Instance under test *****" />
       <ant antfile="sjsas_ee.xml" dir="${bin.dir}/xml" target="stop.remoteInstance"/>
   </target>

   <!-- Change the JDBC resource under test  -->
    <target name="modify.jdbc.resources" depends="checkCTSConfiguration">
       <antcall target="copy.db.jars"/>       
       <ant antfile="s1as.xml" dir="." target="modify.jdbc.resources"/>
       <ant antfile="s1as.xml" dir="." target="ping.jdbc.pool"/>
    </target>

   <!--  Target to enable jacc for the Java EE app server under test -->
   <target name="enable.jacc" depends="checkCTSConfiguration">
       <antcall target="enable.jacc.das"/>
   </target>

   <!--  Target to enable jacc for the DAS/PE -->
   <target name="enable.jacc.das"  >
       <ant antfile="s1as.xml" dir="." target="enable.jacc"/>
       <ant antfile="s1as.xml" dir="." target="restart.server"/>
   </target>

   <!--  Target to disable jacc for the Java EE app server under test -->
   <target name="disable.jacc" depends="checkCTSConfiguration">
       <antcall target="disable.jacc.das"/>
   </target>

   <!--  Target to disable jacc for the DAS/PE -->
   <target name="disable.jacc.das"  >
       <ant antfile="s1as.xml" dir="." target="disable.jacc"/>
   </target>
   
   <!--  Target to disable jacc for the Java EE app server under test -->
   <target name="disable.wss.providers" depends="checkCTSConfiguration">
       <antcall target="disable.wss.providers.das"/>
   </target>

   <!--  Target to disable jacc for the DAS/PE -->
   <target name="disable.wss.providers.das"  >
       <ant antfile="s1as.xml" dir="." target="disable.wss.providers"/>
   </target>
   
   <!--  Target to enable wss providers for the Java EE app server under test -->
   <target name="enable.wss.providers" depends="checkCTSConfiguration">
       <antcall target="enable.wss.providers.das"/>
   </target>
   
   <!--  Target to enable wss providers for the DAS/PE -->
   <target name="enable.wss.providers.das"  >
       <ant antfile="s1as.xml" dir="." target="enable.wss.providers"/>
       <ant antfile="s1as.xml" dir="." target="restart.server"/>
   </target>

   <!--  Target to enable tx interop for the Java EE app server under test -->
   <target name="enable.tx.interop" depends="checkCTSConfiguration" >
       <antcall target="enable.tx.interop.das"/>
       <antcall target="enable.tx.interop.remoteInstance"/>
   </target>

   <!--  Target to enable tx interop for the PE/DAS -->
   <target name="enable.tx.interop.das"  if="testingAgainstDAS">
       <ant antfile="s1as.xml" dir="." target="enable.tx.interop"/>
   </target>

   <!--  Target to enable tx interop for RemoteInstance -->
   <target name="enable.tx.interop.remoteInstance"  if="testingAgainstRemoteInstance">
       <ant antfile="sjsas_ee.xml" dir="${bin.dir}/xml" target="enable.tx.interop"/>
   </target>

   <!--  Target to disable tx interop for the Java EE app server under test -->
   <target name="disable.tx.interop" depends="checkCTSConfiguration">
       <antcall target="disable.tx.interop.das"/>
       <antcall target="disable.tx.interop.remoteInstance"/>
   </target>

   <!--  Target to disable tx interop for the PE/DAS -->
   <target name="disable.tx.interop.das"  if="testingAgainstDAS">
       <ant antfile="s1as.xml" dir="." target="disable.tx.interop"/>
   </target>

   <!--  Target to disable tx interop for RemoteInstance -->
   <target name="disable.tx.interop.remoteInstance"  if="testingAgainstRemoteInstance">
       <ant antfile="sjsas_ee.xml" dir="${bin.dir}/xml" target="disable.tx.interop"/>
   </target>

   <!-- Determine the S1AS target to be executed (with JMS)  -->
    <target name="use.jms" if="useJms">
        <echo message="*** Configuring/Cleaning S1AS including JMS ***" />
         <property name="configTarget" value="configall.s1as"/>
         <property name="cleanTarget" value="cleanall.s1as"/>
    </target>

   <!-- Determine the S1AS target to be executed (without JMS)  -->
    <target name="no.jms" if="skip.jms">
        <echo message="*** Configuring/Cleaning S1AS WITHOUT JMS ***" />
         <property name="configTarget" value="config.s1as"/>
         <property name="cleanTarget" value="clean.s1as"/>
    </target>

    <target name="delete.cts.ext.jars">
       <delete file="${javaee.home}/modules/cts.jar" quiet="true"/>
       <delete file="${javaee.home}/modules/tsharness.jar" quiet="true"/>
    </target>

    <target name="copy.cts.ext.jars">
        <!-- For JDK8, and especially appclient, these need to be on ext dir path. I'd prefer not to put them on server's ext dir path, but that would be too complicated now -->
        <copy file="${ts.home}/lib/cts.jar" todir="${extension.dir}"/>
        <copy file="${ts.home}/lib/tsharness.jar" todir="${extension.dir}"/>

        <!-- On jdk 11, ext dirs actually have have no effect. We put these on system classpath,
             and OSGified versions of them into glassfish modules. -->
        <copy file="${ts.home}/lib/cts.jar" todir="${javaee.home}/modules/"/>
        <copy file="${ts.home}/lib/tsharness.jar" todir="${javaee.home}/modules/"/>
        <!-- add OSGi attributes. We can see those in project osgi-bundler, binding maven into this process would be too cumbersome -->
        <jar update="true" file="${javaee.home}/modules/cts.jar">
            <manifest>
                <attribute name="Bundle-ManifestVersion" value="2"/>
                <attribute name="Bundle-Name" value="cts"/>
                <attribute name="Bundle-SymbolicName" value="fish.payara.internal.tck.cts"/>
                <attribute name="Bundle-Version" value="1.0.0.SNAPSHOT"/>
                <attribute name="Export-Package" value="com.sun.ts.lib.deliverable.cts;uses:=&quot;com.sun.javatest,com.sun.ts.lib.deliverable,com.sun.ts.lib.porting&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.deliverable.cts.deploy;uses:=&quot;com.sun.ts.lib.deliverable,com.sun.ts.lib.porting,javax.enterprise.deploy.shared,javax.enterprise.deploy.spi,javax.enterprise.deploy.spi.exceptions,javax.enterprise.deploy.spi.status&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.deliverable.cts.resource;uses:=&quot;javax.naming,javax.naming.spi&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.implementation.sun.common;uses:=&quot;com.sun.ts.lib.porting&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.implementation.sun.javaee;uses:=&quot;com.sun.ts.lib.deliverable,com.sun.ts.lib.porting,javax.enterprise.deploy.spi,javax.enterprise.deploy.spi.status,javax.net.ssl,javax.security.auth.callback,org.xml.sax&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.implementation.sun.javaee.glassfish;uses:=&quot;com.sun.ts.lib.deliverable,com.sun.ts.lib.porting&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.implementation.sun.javaee.runtime;uses:=&quot;com.sun.ts.lib.porting,org.xml.sax&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.implementation.sun.javaee.runtime.app;uses:=&quot;javax.xml.bind.annotation,javax.xml.bind.annotation.adapters&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.implementation.sun.javaee.runtime.appclient;uses:=&quot;javax.xml.bind.annotation,javax.xml.bind.annotation.adapters&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.implementation.sun.javaee.runtime.ejb;uses:=&quot;javax.xml.bind.annotation,javax.xml.bind.annotation.adapters&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.implementation.sun.javaee.runtime.web;uses:=&quot;javax.xml.bind.annotation,javax.xml.bind.annotation.adapters&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.porting;uses:=&quot;javax.enterprise.deploy.spi,javax.enterprise.deploy.spi.status&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.tests.security.permissions;version=&quot;1.0.0&quot;"/>
                <attribute name="Import-Package" value="com.sun.enterprise.security.auth.login;resolution:=optional,
                    com.sun.javatest;resolution:=optional,
                    com.sun.ts.lib.deliverable;resolution:=optional,
                    com.sun.ts.lib.harness;resolution:=optional,
                    com.sun.ts.lib.implementation.sun.javaee;resolution:=optional,
                    com.sun.ts.lib.implementation.sun.javaee.runtime;resolution:=optional,
                    com.sun.ts.lib.implementation.sun.javaee.runtime.app;resolution:=optional,
                    com.sun.ts.lib.implementation.sun.javaee.runtime.appclient;resolution:=optional,
                    com.sun.ts.lib.implementation.sun.javaee.runtime.ejb;resolution:=optional,
                    com.sun.ts.lib.implementation.sun.javaee.runtime.web;resolution:=optional,
                    com.sun.ts.lib.porting;resolution:=optional,
                    com.sun.ts.lib.util;resolution:=optional,
                    org.apache.tools.ant;resolution:=optional,
                    org.jdom;resolution:=optional,
                    org.jdom.input;resolution:=optional,
                    org.jdom.output;resolution:=optional,
                    javax.enterprise.deploy.shared,
                    javax.enterprise.deploy.shared.factories,
                    javax.enterprise.deploy.spi,
                    javax.enterprise.deploy.spi.exceptions,
                    javax.enterprise.deploy.spi.factories,
                    javax.enterprise.deploy.spi.status,
                    javax.naming,
                    javax.naming.spi,
                    javax.net.ssl,
                    javax.security.auth,
                    javax.security.auth.callback,
                    javax.xml.bind,
                    javax.xml.bind.annotation,
                    javax.xml.bind.annotation.adapters,
                    javax.xml.parsers,
                    javax.xml.transform,
                    javax.xml.transform.sax,
                    org.glassfish.deployment.client,
                    org.xml.sax"/>
            </manifest>
        </jar>

        <jar update="true" file="${javaee.home}/modules/tsharness.jar">
            <manifest>
                <attribute name="Bundle-ManifestVersion" value="2"/>
                <attribute name="Bundle-Name" value="tsharness"/>
                <attribute name="Bundle-SymbolicName" value="fish.payara.internal.tck.tsharness"/>
                <attribute name="Bundle-Version" value="1.0.0.SNAPSHOT"/>
                <attribute name="Export-Package" value="
                    com.sun.javatest;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.deliverable;uses:=&quot;com.sun.javatest,com.sun.ts.lib.porting&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.harness;uses:=&quot;com.sun.javatest,com.sun.javatest.finder,com.sun.javatest.lib,com.sun.javatest.util,com.sun.ts.lib.deliverable,com.sun.ts.lib.porting&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.javatest;uses:=&quot;com.sun.interview,com.sun.javatest,com.sun.javatest.interview&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.porting;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util;uses:=&quot;javax.sql,org.xml.sax&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util.sec.misc;uses:=&quot;com.sun.ts.lib.util.sec.nio.ch,com.sun.ts.lib.util.sec.reflect,com.sun.ts.lib.util.sec.reflect.annotation&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util.sec.net.www;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util.sec.nio;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util.sec.nio.ch;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util.sec.nio.cs;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util.sec.reflect;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util.sec.reflect.annotation;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util.sec.security.action;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util.sec.security.auth;uses:=&quot;javax.security.auth&quot;;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util.sec.security.provider;version=&quot;1.0.0&quot;,
                    com.sun.ts.lib.util.sec.security.util;uses:=&quot;javax.security.auth&quot;;version=&quot;1.0.0&quot;"/>
                <attribute name="Extension-Name" value="tsharness"/>
                <attribute name="Implementation-Vendor" value="Sun Microsystems, Inc"/>
                <attribute name="Implementation-Vendor-Id" value="com.sun"/>
                <attribute name="Implementation-Version" value="1.4"/>
                <attribute name="Import-Package" value="
                    com.sun.interview;resolution:=optional,
                    com.sun.javatest;resolution:=optional,
                    com.sun.javatest.finder;resolution:=optional,
                    com.sun.javatest.interview;resolution:=optional,
                    com.sun.javatest.lib;resolution:=optional,
                    com.sun.javatest.util;resolution:=optional,
                    com.sun.ts.lib.deliverable;resolution:=optional,
                    com.sun.ts.lib.harness;resolution:=optional,
                    com.sun.ts.lib.javatest;resolution:=optional,
                    com.sun.ts.lib.porting;resolution:=optional,
                    com.sun.ts.lib.util;resolution:=optional,
                    com.sun.ts.lib.util.sec.misc;resolution:=optional,
                    com.sun.ts.lib.util.sec.net.www;resolution:=optional,
                    com.sun.ts.lib.util.sec.nio;resolution:=optional,
                    com.sun.ts.lib.util.sec.nio.ch;resolution:=optional,
                    com.sun.ts.lib.util.sec.nio.cs;resolution:=optional,
                    com.sun.ts.lib.util.sec.reflect;resolution:=optional,
                    com.sun.ts.lib.util.sec.reflect.annotation;resolution:=optional,
                    com.sun.ts.lib.util.sec.security.action;resolution:=optional,
                    com.sun.ts.lib.util.sec.security.auth;resolution:=optional,
                    com.sun.ts.lib.util.sec.security.util;resolution:=optional,
                    org.apache.tools.ant;resolution:=optional,
                    org.apache.tools.ant.taskdefs.condition;resolution:=optional,
                    javax.naming,
                    javax.rmi,
                    javax.security.auth,
                    javax.security.auth.x500,
                    javax.sql,
                    javax.xml.parsers,
                    org.xml.sax"/>
            </manifest>
        </jar>
    </target>

    <!--
          Install the JDBC drivers that we could possible be testing.
     -->
    <target name="copy.db.jars" depends="check.db.jars" if="found.db.jars" >
        <mkdir dir="${s1as.lib}/jdbcdrivers"/>
        <copy todir="${s1as.lib}/jdbcdrivers" overwrite="yes" failonerror="false" >
             <fileset dir="${jdbc.lib.class.path}">
                <include name="*"/>
                <exclude name="db2*"/>
             </fileset>
        </copy>
    </target>

    <!-- If one user installs the RI and a different user installs the VI the   -->
    <!-- config directories need to have their permissions loosened so at       -->
    <!-- runtime, the appclient container may access the cacerts.jks file in    -->
    <!-- both the RI and VI.  It also allows one user to config both the RI     -->
    <!-- and VI.                                                                -->
    <target name="vi.perms">
      <echo message="****server.config.dir: ${sjsas.instance.config.dir}"/>
      <chmod file="${s1as.domain}/${sjsas.instance.config.dir}" perm="ugo+rwx" type="dir"/>
      <chmod dir="${s1as.domain}/${sjsas.instance.config.dir}" perm="ugo+rwx" includes="*"/>

    </target>

    <!--
      Check to see which configuration we are using for testing CTS.
      Possible values:
      DAS            -  Normal PE testing (or against DAS on SE/EE)
      remote         -  Test against a remote instance (SE/EE only)
      cluster        -  Testing in a cluster configuration (SE/EE only)

      Also determine if we need to worry about JMS or not.

    -->
    <target name="checkCTSConfiguration" >
        <condition property="testingAgainstDAS">
          <equals arg1="${sjsas.env.type}" arg2="das" casesensitive="true" trim="true"/>
        </condition>

        <condition property="testingAgainstRemoteInstance">
          <equals arg1="${sjsas.env.type}" arg2="remote" casesensitive="true" trim="true"/>
        </condition>

        <condition property="testingAgainstCluster">
          <equals arg1="${sjsas.env.type}" arg2="cluster" casesensitive="true" trim="true"/>
        </condition>
   
        <condition property="useJms">
           <istrue value="${enable.jms}"/>
        </condition >
        <condition property="skip.jms">
           <not>
           <istrue value="${enable.jms}"/>
           </not>
        </condition >

        <condition property="create.jdbc.pools.prop">
          <istrue value="${create.jdbc.pools}"/>
        </condition>
        <echo message="*** create.jdbc.pools is ${create.jdbc.pools} ***"/>       

    </target>

   <!--
        Check to see if the directory where the jdbc drivers live actually
        exists.
   -->
   <target name="check.db.jars">
        <condition property="found.db.jars">
              <available file="${jdbc.lib.class.path}" type="dir"/>
        </condition>

    </target>

   <!--  Target to enable tx interop for RemoteInstance -->
   <target name="restart.remote.instance"  if="testingAgainstRemoteInstance">
        <ant antfile="sjsas_ee.xml" dir="${bin.dir}/xml" target="stop.remoteInstance"/>
        <ant antfile="sjsas_ee.xml" dir="${bin.dir}/xml" target="start.remoteInstance"/>
   </target>

   <!--  Add the certificates needed for interop to the RI and SJSAS -->
   <target name="add.interop.certs" depends="checkCTSConfiguration">
       <ant antfile="s1as.xml" dir="." target="add.interop.certs"/>
       <antcall target="restart.remote.instance"/>
   </target>

    <target name="start.javadb">
      <ant antfile="s1as.xml" target="start.javadb" dir="."/>
    </target>

    <target name="start.javadb.asadmin" >
        <ant antfile="s1as.xml" target="start.javadb.asadmin" dir="."/>
    </target>

    <target name="stop.javadb.asadmin" >
        <ant antfile="s1as.xml" target="stop.javadb.asadmin" dir="."/>
    </target>


</project>

